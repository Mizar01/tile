TilesConfig = {
	"size" : 3,
	"distance": 3.2,
	"activableTypes": [ "TileBeam", "TileBeamReceptor", ],
	//tiles that block beams or projectiles from proceed further. This does not mean they are stopping
	//the action to be possibly executed on the incident tile (the blocking one).
    //"blockingProjectileTypes": ["TileBeam", "TileBeamReceptor", "TileBlock",],
    "bonusTypes": ["life", "energy", "blood", "fear", "shadow", "light"],
    "bonusColors": ["lime", "yellow", "red", "gray", "black", "white" ],
    "bonusTextures": ["media/particle2.png", "media/particle2.png", "media/hud_blood.png",
                      "media/hud_fear.png", "media/hud_shadow.png", "media/hud_light.png"]
}


TileMapConfig = function() {
	this.map = []
    this.mapSizeX = 0
    this.mapSizeZ = 0
	this.startTile = null
	this.endTile = null
    
	this.getTile = function(mapx, mapz) {
        if (this.map[mapx] != null && this.map[mapx][mapz] != null) {
        	//console.log(this.map[mapx][mapz])
            return this.map[mapx][mapz]
        }
        return null
    }
    
    this.buildRandomMap2 = function(mapX, mapZ) {
        
        var rm = new TileRandomMap(mapX, mapZ)
        testObj = rm
        rm.init()
        var mapString = rm.buildMap()
        console.log(mapString)
        this.loadMapString(mapString)
    }
    
    /**
     * This builds a random map, but without any sense !!!
     *
     * TODO : make it have some sense.
     **/
    this.buildRandomMap = function() {
        
        var sx = Math.round(Math.random() * 15 + 10)
        var sy = Math.round(Math.random() * 15 + 10)
        
        var startOk = false
        var endOk = false
        var symbols = ["**", "ST", "EN", "01", "02", "03", "BE", "BR", "TU", "XX"]
        var m = ""
        for (var iy = 0; iy < sy; iy++) {
            for (var ix = 0; ix < sx; ix++) {
                var ok = false
                var t = "**"
                while (!ok) {
                    t = ACE3.Utils.arrayRandVal(symbols)
                    
                    if ((t == "ST" && startOk) || (t == "EN" && endOk)) {
                        continue
                    }else {
                        if (t == "ST") {
                            startOk = true
                        }
                        if (t == "EN") {
                            endOk = true
                        }
                    }
                    ok = true
                }
                m += t + ","
                
            }
            m = m.substring(0, m.length - 1) + "-"
        }
        
        //console.log(m)
        
        this.loadMapString(m)

    }
    
    
    
    this.loadMap = function(mapName) {
        this.loadMapString(this.mapStrings[mapName])
    }
    
    this.loadMapString = function (ms) {
    	this.map = []
    	var rows = ms.split("-")
    	//detect h, w
    	var h = rows.length
    	var w = rows[0].split(",").length
    	for (var ci = 0; ci < w; ci++) {
    		this.map[ci] = []
    		//var vals = rows[ri].split(",")
    		for (var ri = 0; ri < h; ri++) {
    	    	var value = rows[ri].split(",")[ci]
    	    	if (value != null && value != "") {
    	    		var type = value.substring(0,2)
    	    		var typeName = this.symbolMap[type]
    	    		var params = ""
    	    		if (value.length > 2) {
    	    			params = value.substring(2, value.length)
    	    		}
    	    		if (typeName) { 
	    	    		var t = new window[typeName](ci, ri)
		    	    	if (type == "ST") {
		    	    		this.startTile = t
		    	    	}else if (type == "EN") {
		    	    		this.endTile = t
		    	    	}
		    	    	if (GameUtils.valueInList(typeName, TilesConfig.activableTypes)) {
		    	    		tileEnablerManager.registerTile(t)
		    	    	}
		    	    	gameManager.registerActor(t)
			            this.map[ci][ri] = t
			        }
		        }
    		}
    	}
        this.mapSizeX = this.map.length
        this.mapSizeZ = this.map[0].length
        



    }

	this.symbolMap =   { "ST": "StartTile", 
						 "01": "Tile",
						 "02": "Tile2Go",
						 "03": "Tile3Go",
						 "EN": "EndTile",
						 //"SS": "TileSwitchStatusAround",
						 "BE": "TileBeam",
						 "BR": "TileBeamReceptor",
						 "XX": "TileBlock",
                         "TU": "TileUnit",
						}


    this.mapStrings = {
	
"test" :
"TU,TU,ST,01,BE,01-" +
"01,02,01,03,TU,01-" +
"TU,01,01,01,TU,01-" +
"01,01,TU,02,TU,EN-" +
"BR,03,01,02,BE,01-" +
"01,01,01,02,01,01-",

"world":     
"ST,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"BE,**,**,**,BE,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +	    		
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,01,01,BR,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,01,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,01,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,BE,**,**,**,**,**,**,**,**,BE,**,**,**,**,**,**,**,**,**,**,**,**-" +	    		
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,BE,**,**,**,**,**,BR,EN-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +	    		
"**,**,**,**,**,**,**,**,**,**,**,BE,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,BE,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,01,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,01,**,**,**,**,**,**,**-" +	    		
"**,**,**,**,**,**,**,**,**,**,**,BE,**,**,**,**,BR,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**,**-",

"tunnel":
"**,**,**,**,XX,EN,XX,**-" +
"**,XX,BE,**,**,BR,XX,**-" +
"**,**,**,**,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"XX,**,BE,XX,XX,XX,XX,XX-" +
"01,01,03,BR,**,**,**,BE-" +
"BR,**,01,**,**,BE,**,BR-" +
"**,**,01,01,01,01,XX,XX-" +
"**,**,01,**,**,**,**,**-" +	          
"**,**,01,**,**,**,**,**-" +
"**,**,01,**,**,BR,**,**-" +
"**,BR,01,**,**,BE,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,BE,**,**-" +
"**,**,**,**,**,**,**,**-" +
"XX,XX,XX,XX,XX,**,XX,XX-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"XX,XX,XX,XX,XX,**,XX,XX-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,BE,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"**,**,**,**,**,**,**,**-" +
"BR,**,**,**,BE,**,XX,**-" +
"01,XX,01,01,01,**,**,**-" +
"01,XX,BR,**,**,**,**,**-" +
"01,XX,**,**,**,**,**,**-" +
"01,**,**,**,**,BE,**,**-" +
"BE,**,**,**,**,**,**,**-" +
"**,XX,**,XX,**,**,**,**-" +
"**,**,BE,**,**,**,**,**-" +
"**,**,01,**,**,**,**,**-" +
"**,**,01,**,**,**,**,XX-" +	          
"BE,**,01,**,**,**,BE,XX-" +
"**,**,01,**,**,**,**,**-" +
"**,**,01,**,**,BE,**,**-" +
"XX,**,01,**,**,01,**,**-" +
"XX,**,01,**,**,01,BR,**-" +
"**,**,01,**,XX,01,XX,**-" +
"**,01,01,**,**,**,**,**-" +
"**,01,**,**,**,**,XX,**-" +
"**,02,01,BR,**,**,BE,**-" +
"**,01,**,**,**,**,01,BR-" +
"01,01,**,**,**,**,**,**-" +
"01,**,BE,**,**,BE,**,**-" +
"01,**,**,**,BR,01,**,**-" +
"01,**,**,**,**,**,**,**-" +
"01,XX,**,XX,BE,XX,XX,BE-" +
"BR,**,BE,**,ST,**,**,BR-",

'Rant':
'**,**,**,**,BE,**,BE,**,**,EN,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,**,**,**,**,**,**,**,01,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,**,**,**,**,**,**,**,01,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,BE,**,BE,**,**,**,**,01,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,01,**,**,**,**,**,**,01,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,01,**,**,**,**,**,**,01,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,01,**,**,**,**,**,01,03,01,01,01,01,01,01,**,**,**,**-' + 
'**,**,01,BR,**,**,**,**,01,02,02,**,**,**,**,01,**,**,**,**-' + 
'**,**,**,**,**,**,BR,**,01,XX,01,**,BR,**,**,01,**,**,**,**-' + 
'**,**,**,BE,**,BR,03,01,02,XX,02,01,03,BR,**,01,**,**,**,BE-' + 
'**,**,**,**,**,**,01,**,01,XX,01,**,01,**,**,01,**,**,**,**-' + 
'**,**,**,**,**,**,BR,**,01,XX,01,**,01,01,01,01,**,BE,**,BE-' + 
'**,**,**,**,**,**,**,**,01,01,01,**,**,**,**,**,**,**,**,**-' + 
'**,**,**,**,**,**,**,**,**,01,**,**,**,**,**,**,**,**,**,**-' + 
'**,**,**,**,**,**,**,**,XX,01,XX,**,**,**,**,**,**,**,**,**-' + 
'**,**,**,BE,**,**,**,**,BR,03,BR,**,**,**,**,BE,**,**,**,**-' + 
'BE,**,**,**,**,**,BE,**,**,01,**,**,**,**,**,XX,**,BR,**,**-' + 
'**,**,**,**,**,**,**,**,**,01,01,01,01,01,**,01,02,01,**,BE-' + 
'**,**,**,BE,**,**,BE,**,**,01,**,**,**,01,**,01,**,XX,**,01-' + 
'BE,**,**,**,**,**,**,BE,01,ST,01,01,01,02,01,01,01,BE,**,BR-', 

'Curl':
'BE,BE,EN,**,BE-' + 
'**,XX,01,01,**-' + 
'BE,**,**,BR,**-' + 
'XX,XX,XX,XX,**-' + 
'ST,BE,TU,**,BE-',

'Corona':
'XX,XX,XX,XX,XX,XX,XX,EN,XX,XX,XX,XX,XX,XX,XX-' + 
'XX,**,**,**,01,01,01,03,01,01,BR,**,**,**,BE-' + 
'BE,**,**,**,BR,**,**,BR,**,**,**,**,XX,**,01-' + 
'**,XX,XX,**,**,**,**,**,**,**,**,**,XX,**,01-' + 
'**,XX,XX,BE,**,**,BE,**,**,BR,01,01,01,01,01-' + 
'**,XX,XX,**,XX,XX,**,**,**,**,**,**,**,XX,**-' + 
'**,XX,XX,**,XX,XX,**,**,**,**,**,**,**,XX,**-' + 
'BE,**,**,BE,**,**,**,BE,**,**,**,**,TU,XX,**-' + 
'XX,XX,XX,XX,XX,XX,**,XX,XX,XX,XX,XX,01,XX,XX-' + 
'XX,**,**,**,**,**,**,**,**,**,**,**,01,**,XX-' + 
'XX,**,**,**,**,**,BE,**,**,**,**,TU,TU,**,XX-' + 
'XX,**,**,**,**,**,01,01,01,01,01,TU,01,**,XX-' + 
'XX,**,**,**,**,TU,01,TU,**,**,**,**,**,**,XX-' + 
'XX,**,**,**,**,TU,01,TU,**,**,**,**,**,**,XX-' + 
'XX,XX,XX,XX,**,**,ST,**,**,XX,XX,XX,XX,XX,XX-',

'Randstad':
'TU,01,01,01,**,BE,**,BE,**,TU-' + 
'01,XX,XX,01,**,**,**,**,**,01-' + 
'BE,XX,XX,BR,**,**,**,**,**,01-' + 
'**,**,**,**,**,**,**,**,**,01-' + 
'ST,01,01,BE,**,**,**,**,BR,01-' + 
'**,**,**,**,**,**,**,**,**,**-' + 
'**,**,**,**,BE,BE,XX,BR,01,01-' + 
'BR,**,**,**,**,XX,XX,01,01,TU-' + 
'01,**,**,**,**,**,**,01,TU,EN-' + 
'TU,01,BE,**,BE,**,**,01,01,TU-',


    }
}